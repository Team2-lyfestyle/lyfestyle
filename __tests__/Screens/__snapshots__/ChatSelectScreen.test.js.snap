// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ChatSelectScreen /> Should render the <ChatSelectScreen /> component 1`] = `null`;

exports[`renders correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#204051",
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "height": 60,
      }
    }
  />
  <View
    style={
      Object {
        "height": 60,
        "width": "100%",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "flexDirection": "row",
          "justifyContent": "space-around",
        }
      }
    >
      <View>
        <Text
          style={
            Object {
              "color": "#EEEEEE",
              "fontSize": 45,
              "fontWeight": "500",
            }
          }
        >
          Messages
        </Text>
      </View>
      <View
        accessible={true}
        focusable={true}
        isTVSelectable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#406081",
            "borderRadius": 100,
            "height": 35,
            "opacity": 1,
            "width": 35,
          }
        }
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            }
          }
        >
          <Text />
        </View>
      </View>
      <View
        accessible={true}
        focusable={true}
        isTVSelectable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#406081",
            "borderRadius": 100,
            "height": 35,
            "opacity": 1,
            "width": 35,
          }
        }
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "center",
            }
          }
        >
          <Text />
        </View>
      </View>
    </View>
  </View>
  <TextInput
    allowFontScaling={true}
    autoCapitalize="none"
    autoCorrect={false}
    collapsable={false}
    fontSize="30"
    onChangeText={[Function]}
    onGestureHandlerEvent={[Function]}
    onGestureHandlerStateChange={[Function]}
    placeholder="Search"
    placeholderTextColor="#222222"
    rejectResponderTermination={true}
    style={
      Object {
        "alignSelf": "center",
        "backgroundColor": "#406081",
        "borderBottomColor": "#8A8F9E",
        "borderBottomWidth": 0.5,
        "borderRadius": 100,
        "color": "#EEEEEE",
        "fontSize": 20,
        "height": 50,
        "marginVertical": 20,
        "paddingLeft": 30,
        "width": "90%",
      }
    }
    underlineColorAndroid="transparent"
  />
  <ActivityIndicator
    animating={true}
    color="#999999"
    hidesWhenStopped={true}
    size="small"
  />
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    transparent={true}
    visible={false}
  >
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
    />
    <View
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      pointerEvents="box-none"
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-end",
          "margin": 0,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
    >
      <View
        style={
          Object {
            "backgroundColor": "#204051",
            "height": 200,
            "width": "100%",
          }
        }
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "justifyContent": "space-around",
            }
          }
        >
          <View
            accessible={true}
            focusable={true}
            isTVSelectable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "backgroundColor": "#406081",
                "borderRadius": 100,
                "height": 50,
                "width": "80%",
              }
            }
          >
            <View
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "justifyContent": "center",
                }
              }
            >
              <Text
                style={
                  Object {
                    "color": "#00FED4",
                    "fontSize": 18,
                    "fontWeight": "800",
                  }
                }
              >
                Delete local chat sessions
              </Text>
            </View>
          </View>
          <View
            accessible={true}
            focusable={true}
            isTVSelectable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "backgroundColor": "#406081",
                "borderRadius": 100,
                "height": 50,
                "width": "80%",
              }
            }
          >
            <View
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "justifyContent": "center",
                }
              }
            >
              <Text
                style={
                  Object {
                    "color": "#00FED4",
                    "fontSize": 18,
                    "fontWeight": "800",
                  }
                }
              >
                Cancel
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
  </Modal>
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    onSwipeComplete={[Function]}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeDirection={
      Array [
        "down",
      ]
    }
    swipeThreshold={100}
    transparent={true}
    visible={false}
  >
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
    />
    <View
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Array [
          Array [
            Object {
              "margin": 37.5,
              "transform": Array [
                Object {
                  "translateY": 0,
                },
              ],
            },
            Object {
              "flex": 1,
              "justifyContent": "center",
            },
            Object {
              "height": 400,
              "margin": 0,
              "width": "100%",
            },
            Object {
              "margin": 0,
            },
          ],
          Object {
            "paddingBottom": 0,
          },
        ]
      }
    >
      <View
        hideModalContentWhileAnimating={false}
        onModalHide={[Function]}
        onModalWillHide={[Function]}
        onModalWillShow={[Function]}
        onMoveShouldSetResponder={[Function]}
        onMoveShouldSetResponderCapture={[Function]}
        onResponderEnd={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderReject={[Function]}
        onResponderRelease={[Function]}
        onResponderStart={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        onStartShouldSetResponderCapture={[Function]}
        onSwipeComplete={[Function]}
        pointerEvents="box-none"
        scrollHorizontal={false}
        scrollOffset={0}
        scrollOffsetMax={0}
        scrollTo={null}
        style={
          Object {
            "flex": 1,
            "height": 400,
            "justifyContent": "center",
            "left": 0,
            "margin": 0,
            "top": 0,
            "transform": Array [
              Object {
                "translateY": 0,
              },
            ],
            "width": "100%",
          }
        }
        supportedOrientations={
          Array [
            "portrait",
            "landscape",
          ]
        }
        swipeDirection={
          Array [
            "down",
          ]
        }
        swipeThreshold={100}
      >
        <View
          style={
            Object {
              "backgroundColor": "#204051",
              "borderTopLeftRadius": 25,
              "borderTopRightRadius": 25,
              "flex": 1,
              "marginTop": 120,
              "overflow": "hidden",
            }
          }
        >
          <View
            style={
              Object {
                "alignSelf": "center",
                "backgroundColor": "black",
                "borderRadius": 100,
                "height": 3,
                "marginTop": 10,
                "width": "60%",
              }
            }
          />
          <Text
            style={
              Object {
                "alignSelf": "center",
                "color": "#EEEEEE",
                "fontSize": 30,
                "fontWeight": "500",
                "height": 50,
                "marginTop": 20,
              }
            }
          >
            New Message
          </Text>
          <View
            style={
              Object {
                "height": 60,
                "width": "100%",
              }
            }
          >
            <View
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "flexDirection": "row",
                  "justifyContent": "space-around",
                }
              }
            >
              <View
                accessible={true}
                focusable={true}
                isTVSelectable={true}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "backgroundColor": "#406081",
                    "borderRadius": 100,
                    "height": 50,
                    "width": 100,
                  }
                }
              >
                <View
                  style={
                    Object {
                      "alignItems": "center",
                      "flex": 1,
                      "justifyContent": "center",
                    }
                  }
                >
                  <Text
                    style={
                      Object {
                        "color": "#00FED4",
                        "fontSize": 18,
                        "fontWeight": "800",
                      }
                    }
                  >
                    Confirm
                  </Text>
                </View>
              </View>
              <View
                accessible={true}
                focusable={true}
                isTVSelectable={true}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "backgroundColor": "#406081",
                    "borderRadius": 100,
                    "height": 50,
                    "width": 100,
                  }
                }
              >
                <View
                  style={
                    Object {
                      "alignItems": "center",
                      "flex": 1,
                      "justifyContent": "center",
                    }
                  }
                >
                  <Text
                    style={
                      Object {
                        "color": "#00FED4",
                        "fontSize": 18,
                        "fontWeight": "800",
                      }
                    }
                  >
                    Cancel
                  </Text>
                </View>
              </View>
            </View>
          </View>
          <TextInput
            allowFontScaling={true}
            autoCapitalize="none"
            autoCorrect={false}
            collapsable={false}
            onBlur={[Function]}
            onChangeText={[Function]}
            onFocus={[Function]}
            onGestureHandlerEvent={[Function]}
            onGestureHandlerStateChange={[Function]}
            rejectResponderTermination={true}
            style={
              Object {
                "alignSelf": "center",
                "backgroundColor": "#406081",
                "borderBottomColor": "#8A8F9E",
                "borderBottomWidth": 0.5,
                "borderRadius": 100,
                "color": "#EEEEEE",
                "fontSize": 20,
                "height": 50,
                "marginTop": 20,
                "paddingLeft": 30,
                "width": "90%",
              }
            }
            underlineColorAndroid="transparent"
          />
          <View
            style={
              Object {
                "height": 100,
                "width": "100%",
              }
            }
          >
            <View
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "flexDirection": "row",
                  "flexWrap": "wrap",
                  "justifyContent": "space-evenly",
                  "marginTop": 5,
                }
              }
            />
          </View>
          <View
            style={
              Object {
                "alignSelf": "center",
                "backgroundColor": "#204051",
                "borderColor": "grey",
                "borderRadius": 1,
                "borderStyle": "dashed",
                "borderWidth": 1,
                "height": 1,
                "width": "100%",
              }
            }
          />
          <RCTScrollView
            data={Array []}
            disableVirtualization={false}
            getItem={[Function]}
            getItemCount={[Function]}
            horizontal={false}
            initialNumToRender={10}
            keyExtractor={[Function]}
            maxToRenderPerBatch={10}
            numColumns={1}
            onContentSizeChange={[Function]}
            onEndReachedThreshold={2}
            onLayout={[Function]}
            onMomentumScrollEnd={[Function]}
            onScroll={[Function]}
            onScrollBeginDrag={[Function]}
            onScrollEndDrag={[Function]}
            removeClippedSubviews={false}
            renderItem={[Function]}
            scrollEventThrottle={50}
            stickyHeaderIndices={Array []}
            style={
              Object {
                "flex": 1,
              }
            }
            updateCellsBatchingPeriod={50}
            viewabilityConfigCallbackPairs={Array []}
            windowSize={21}
          >
            <View />
          </RCTScrollView>
        </View>
      </View>
    </View>
  </Modal>
</View>
`;
